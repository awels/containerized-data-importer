load("@io_bazel_rules_container_rpm//rpm:rpm.bzl", "rpm_image")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")

rpm_image(
    name = "cdi-func-test-imageio-base-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    base = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "@fedora-aarch64//image",
        "//conditions:default": "@fedora//image",
    }),
    rpms = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": [
            "@ovirt-imageio-client-aarch64//file",
            "@ovirt-imageio-common-aarch64//file",
            "@ovirt-imageio-daemon-aarch64//file",
            "@python3-systemd-aarch64//file",
            "@openssl-aarch64//file",
        ],
        "//conditions:default": [
            "@ovirt-imageio-client//file",
            "@ovirt-imageio-common//file",
            "@ovirt-imageio-daemon//file",
            "@python3-systemd//file",
            "@openssl//file",
        ],
    }),
)

container_image(
    name = "cdi-func-test-imageio-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    base = ":cdi-func-test-imageio-base-image",
    cmd = "mkdir -p /images",
    directory = "/",
    entrypoint = ["ovirt-imageio"],
    ports = [
        "12345",
    ],
    tars = [":ovirt-imageio-conf-tar"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "ovirt-imageio-conf",
    srcs = [
        ":99-cdi.conf",
    ],
)

pkg_tar(
    name = "ovirt-imageio-conf-tar",
    srcs = [":ovirt-imageio-conf"],
    mode = "644",
    package_dir = "/etc/ovirt-imageio/conf.d",
)
